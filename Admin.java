package Formulario;

import Modelo.ConexionMySQL;
import com.mysql.jdbc.Connection;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.sql.PreparedStatement;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.JTextArea;
import javax.swing.SwingWorker;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Alana Mina
 */
public class Admin extends javax.swing.JFrame {
     
    int nro;
    
    /** Creates new form Admin */
    public Admin() {
        initComponents();
        inhabilitar();
        Toolkit mipantalla=Toolkit.getDefaultToolkit();
        Dimension tamanoPantalla=mipantalla.getScreenSize();
        int alturaPantalla=tamanoPantalla.height;
        int anchoPantalla=tamanoPantalla.width;
        setLocation(anchoPantalla/3, alturaPantalla/3);
        setTitle("Función Administrador");
        txtLabelSup.setVisible(false);
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
    }
       
    void habilitar() {
        txtUser.setEnabled(false);
        txtPass.setEnabled(false);
        btnLeer.setEnabled(true);
        btnModificar.setEnabled(true);
        btnCargar.setEnabled(true);
    }
    
    void inhabilitar() {
        txtUser.setEnabled(true);
        txtPass.setEnabled(true);
        txtUser.setText("");
        txtPass.setText("");
        btnLeer.setEnabled(false);
        btnModificar.setEnabled(false);
        btnCargar.setEnabled(false);
        txtUser.requestFocus();
    }
            
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtUser = new javax.swing.JTextField();
        btnLeer = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnCargar = new javax.swing.JButton();
        txtPass = new javax.swing.JPasswordField();
        btnVolver = new javax.swing.JButton();
        btnIngresar = new javax.swing.JButton();
        pbCarga = new javax.swing.JProgressBar();
        label = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        txtLabelSup = new javax.swing.JLabel();

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Usuario:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Contraseña:");

        btnLeer.setText("Leer");
        btnLeer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLeerActionPerformed(evt);
            }
        });

        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnCargar.setText("Cargar");
        btnCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarActionPerformed(evt);
            }
        });

        txtPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPassActionPerformed(evt);
            }
        });
        txtPass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPassKeyPressed(evt);
            }
        });

        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        btnIngresar.setText("Ingresar");
        btnIngresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarActionPerformed(evt);
            }
        });

        txtArea.setColumns(20);
        txtArea.setRows(5);
        jScrollPane1.setViewportView(txtArea);

        txtLabelSup.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtLabelSup.setText("Elementos a cargar:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pbCarga, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(txtLabelSup, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnIngresar)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPass)
                            .addComponent(txtUser)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnModificar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnLeer, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnCargar, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnModificar)
                    .addComponent(btnLeer)
                    .addComponent(btnCargar)
                    .addComponent(btnVolver)
                    .addComponent(btnIngresar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pbCarga, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label, javax.swing.GroupLayout.DEFAULT_SIZE, 19, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtLabelSup)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnVolverActionPerformed

    private void txtPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPassActionPerformed
        txtPass.transferFocus();
    }//GEN-LAST:event_txtPassActionPerformed

    private void btnIngresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarActionPerformed
        String pass=String.valueOf(txtPass.getPassword());
        String user = txtUser.getText();
        
        if (user.equals("root")) {
            if (pass.equals("MdM2018")) {
                habilitar();
            }
            else {
                JOptionPane.showMessageDialog(null, "Contraseña incorrecta");
            }
        }
        else {
                JOptionPane.showMessageDialog(null, "El usuario no existe");
            }
    }//GEN-LAST:event_btnIngresarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        txtArea.setText("");
        ProgressModificar p=new ProgressModificar(txtLabelSup, pbCarga, txtArea);
        p.execute();
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnLeerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLeerActionPerformed
        txtArea.setText("");
        ProgressLeer p=new ProgressLeer(txtLabelSup, pbCarga, txtArea);
        p.execute();
    }//GEN-LAST:event_btnLeerActionPerformed

    private void btnCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarActionPerformed
        txtArea.setText("");
        ProgressCargar p=new ProgressCargar(txtLabelSup, pbCarga, txtArea);
        p.execute();
    }//GEN-LAST:event_btnCargarActionPerformed

    private void txtPassKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPassKeyPressed
        if (evt.getKeyCode()==KeyEvent.VK_ENTER) {
            habilitar();
        }
    }//GEN-LAST:event_txtPassKeyPressed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCargar;
    private javax.swing.JButton btnIngresar;
    private javax.swing.JButton btnLeer;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnVolver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label;
    private javax.swing.JProgressBar pbCarga;
    private javax.swing.JTextArea txtArea;
    private javax.swing.JLabel txtLabelSup;
    private javax.swing.JPasswordField txtPass;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables
}

class ProgressLeer extends SwingWorker<Integer, String>{

    /**
     * @return the label
     */
    public JLabel getLabel() {
        return label;
    }

    /**
     * @param label the label to set
     */
    public void setLabel(JLabel label) {
        this.label = label;
    }

    /**
     * @return the jpbar
     */
    public JProgressBar getJpbar() {
        return jpbar;
    }

    /**
     * @param jpbar the jpbar to set
     */
    public void setJpbar(JProgressBar jpbar) {
        this.jpbar = jpbar;
    }

    /**
     * @return the txtArea
     */
    public JTextArea getTxtArea() {
        return txtArea;
    }

    /**
     * @param txtArea the txtArea to set
     */
    public void setTxtArea(JTextArea txtArea) {
        this.txtArea = txtArea;
    }
    
    private JLabel label;
    private JProgressBar jpbar;
    private JTextArea txtArea;

    public ProgressLeer(JLabel label, JProgressBar jpbar, JTextArea txtArea) {
        this.label = label;
        this.jpbar = jpbar;
        this.txtArea = txtArea;
    }
    
    @Override
    protected Integer doInBackground() throws Exception {
        getLabel().setVisible(true);
        getJpbar().setValue(0);
        
        FileInputStream file = new FileInputStream(new File("BaseDeDatos.xlsx"));
            
        XSSFWorkbook wb =new XSSFWorkbook(file);
        XSSFSheet sheet = wb.getSheetAt(0);
            
        int numFilas = sheet.getLastRowNum();
        getLabel().setText("Elementos a cargar: " +numFilas);
        getJpbar().setMaximum(numFilas);
               
        for (int a=0; a <= numFilas; a++) {
            Row fila = sheet.getRow(a);
            int numCols = fila.getLastCellNum();
            for (int b=0; b< numCols; b++) {
                Cell celda = fila.getCell(b);
                if (celda != null) {
                    switch (celda.getCellTypeEnum().toString()) { //hay que especificar qué tipo de celda se va a traer del excel
                        case "NUMERIC":
                            getTxtArea().append(celda.getNumericCellValue()+" ");
                            //System.out.print(celda.getNumericCellValue()+" ");
                        break;
                            
                        case "STRING":
                            getTxtArea().append(celda.getStringCellValue()+" ");
                            //System.out.print(celda.getStringCellValue()+" ");
                        break;
                    }
                }
                else {
                    System.out.print(" ");
                }
            }
            getTxtArea().append("\n");
            getJpbar().setValue(a);
            getTxtArea().append("Proceso en: " +a+"\n");
            //Thread.sleep(500);
            //System.out.println("\n");
        }
        getTxtArea().append("Proceso finalizado");
        JOptionPane.showMessageDialog(null, "Completo");
        return null;
    }
}

class ProgressModificar extends SwingWorker<Integer, String>{

    /**
     * @return the label
     */
    public JLabel getLabel() {
        return label;
    }

    /**
     * @param label the label to set
     */
    public void setLabel(JLabel label) {
        this.label = label;
    }

    /**
     * @return the jpbar
     */
    public JProgressBar getJpbar() {
        return jpbar;
    }

    /**
     * @param jpbar the jpbar to set
     */
    public void setJpbar(JProgressBar jpbar) {
        this.jpbar = jpbar;
    }

    /**
     * @return the txtArea
     */
    public JTextArea getTxtArea() {
        return txtArea;
    }

    /**
     * @param txtArea the txtArea to set
     */
    public void setTxtArea(JTextArea txtArea) {
        this.txtArea = txtArea;
    }
    
    private JLabel label;
    private JProgressBar jpbar;
    private JTextArea txtArea;

    public ProgressModificar(JLabel label, JProgressBar jpbar, JTextArea txtArea) {
        this.label = label;
        this.jpbar = jpbar;
        this.txtArea = txtArea;
    }
    
    @Override
    protected Integer doInBackground() throws Exception {
        getLabel().setVisible(true);
        getJpbar().setValue(0);
        
        FileInputStream file;
        file = new FileInputStream(new File("BaseDeDatos.xlsx"));
            
        XSSFWorkbook wb =new XSSFWorkbook(file);
        XSSFSheet sheet = wb.getSheetAt(0);
            
        int numFilas = sheet.getLastRowNum();
        getLabel().setText("Elementos a cargar: " +numFilas);
        getJpbar().setMaximum(numFilas);
        
        for (int a=0; a <= numFilas; a++) {
            XSSFRow fila = sheet.getRow(a);
            int numCols = 8;
                
            for (int b=0; b<= numCols; b++) {
                XSSFCell celda = (XSSFCell) fila.getCell(b);
                if (celda==null) {
                    if (b==1) {
                        celda = (XSSFCell) fila.createCell(b);
                        celda.setCellValue("-");
                    }
                    else if (b==2) {
                        celda = (XSSFCell) fila.createCell(b);
                        celda.setCellValue("-");
                    }
                    else if (b==3) {
                        celda = (XSSFCell) fila.createCell(b);
                        celda.setCellValue("-");
                    }
                    else if (b==4) {
                        celda = (XSSFCell) fila.createCell(b);
                        celda.setCellValue("-");
                    }
                    else if (b==5) {
                        celda = (XSSFCell) fila.createCell(b);
                        celda.setCellValue(0);
                    }
                    else if (b==6) {
                        celda = (XSSFCell) fila.createCell(b);
                        celda.setCellValue("-");
                    }
                    else if (b==7) {
                        celda = (XSSFCell) fila.createCell(b);
                        celda.setCellValue("-");
                    }
                }
            }
            getJpbar().setValue(a);
            getTxtArea().append("Proceso en: " +a+"\n");
            //Thread.sleep(1000);
            //System.out.println("\n");
        }
        file.close();
            
        FileOutputStream output = new FileOutputStream("Nuevo.xlsx");
        wb.write(output);
        output.close();
        
        getTxtArea().append("Proceso finalizado");
        JOptionPane.showMessageDialog(null, "Completo");
        return null;
    }
}

class ProgressCargar extends SwingWorker<Integer, String>{

    /**
     * @return the label
     */
    public JLabel getLabel() {
        return label;
    }

    /**
     * @param label the label to set
     */
    public void setLabel(JLabel label) {
        this.label = label;
    }

    /**
     * @return the jpbar
     */
    public JProgressBar getJpbar() {
        return jpbar;
    }

    /**
     * @param jpbar the jpbar to set
     */
    public void setJpbar(JProgressBar jpbar) {
        this.jpbar = jpbar;
    }

    /**
     * @return the txtArea
     */
    public JTextArea getTxtArea() {
        return TxtArea;
    }

    /**
     * @param txtArea the txtArea to set
     */
    public void setTxtArea(JTextArea txtArea) {
        this.TxtArea = txtArea;
    }
    
    private JLabel label;
    private JProgressBar jpbar;
    private JTextArea TxtArea;

    public ProgressCargar(JLabel label, JProgressBar jpbar, JTextArea txtArea) {
        this.label = label;
        this.jpbar = jpbar;
        this.TxtArea = txtArea;
    }
    
    @Override
    protected Integer doInBackground() throws Exception {
        getLabel().setVisible(true);
        getJpbar().setValue(0);
        
        ConexionMySQL con = new ConexionMySQL();
        PreparedStatement ps;
        
        Connection conn = (Connection) con.getConexion();
        FileInputStream file = new FileInputStream(new File("Nuevo.xlsx"));
            
        XSSFWorkbook wb =new XSSFWorkbook(file);
        XSSFSheet sheet = wb.getSheetAt(0);
            
        int numFilas = sheet.getLastRowNum();
        getLabel().setText("Elementos a cargar: " +numFilas);
        getJpbar().setMaximum(numFilas);
            
        for (int a=1; a <= numFilas; a++) {
            Row fila = sheet.getRow(a);
            ps = conn.prepareStatement("INSERT INTO minerales (codigo, especie, procedencia, descripcion, coleccion, ano, ubicacion, observaciones) VALUES(?,?,?,?,?,?,?,?)");
            ps.setInt(1, (int) fila.getCell(0).getNumericCellValue()); //codigo
            ps.setString(2, fila.getCell(1).getStringCellValue()); //especie
            ps.setString(3, fila.getCell(2).getStringCellValue()); //procedencia
            ps.setString(4, fila.getCell(3).getStringCellValue()); //descripcion
            ps.setString(5, fila.getCell(4).getStringCellValue()); //coleccion
            ps.setInt(6, (int) fila.getCell(5).getNumericCellValue()); //ano
            ps.setString(7, fila.getCell(6).getStringCellValue()); //ubicacion
            ps.setString(8, fila.getCell(7).getStringCellValue()); //observaciones
            ps.execute();
                
            getJpbar().setValue(a);
            getTxtArea().append("Proceso en: " +a+"\n");
            //Thread.sleep(1000);
            //System.out.println("\n");
        }
        conn.close();
        getTxtArea().append("Proceso finalizado");
        JOptionPane.showMessageDialog(null, "Completo");
        return null;
    }
}